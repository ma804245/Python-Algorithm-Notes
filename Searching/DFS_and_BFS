from collections import deque

# DFS 메서드 정의
def dfs(graph, v, visited):
  # 현재 노드 방문 처리
  visited[v] = True
  print(v, end = ' ')
  # 현재 노드와 연결된 다른 노드 재귀적으로 방문
  for i in graph[v]:
    if not visited[i]:
      dfs(graph, i, visited)

# BFS 메서드 정의
def bfs(graph, first, visited):
  # 큐 구현을 위해 deque 라이브러리 사용
  queue = deque([first])
  # 현재 노드 방문 처리
  visited[first] = True
  # 큐가 빌 때까지 반복
  while queue:
    # 큐에서 최상단 원소를 뽑아 출력
    v = queue.popleft()
    print(v, end = ' ')
    # 해당 원소와 연결된, 아직 방문하지 않은 원소들을 큐에 삽입
    for i in graph[v]:
      if not visited[i]:
        visited[i] = True
        queue.append(i)

graph = [
  [],
  [2, 3, 8],
  [1, 7],
  [1, 4, 5],
  [3, 5],
  [3, 4],
  [7],
  [2, 6, 8],
  [1, 7]
]

visited1 = [False] * 10
visited2 = [False] * 10
dfs(graph, 1, visited1)
print()
bfs(graph, 1, visited2)
